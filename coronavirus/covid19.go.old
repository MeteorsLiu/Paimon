package coronavirus

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"

	"github.com/jellyqwq/Paimon/requests"
	"github.com/jellyqwq/Paimon/tools"
)

// General
type VirusDetailed struct {
	New struct {
		// 新增确诊
		Diagnose struct {
			Abroad                int `json:"abroad"`
			Mainland              int `json:"mainland"`
			AbroadFromAsymptoma   int `json:"abroad_from_asymptoma"`
			MainlandFromAsymptoma int `json:"mainland_from_asymptoma"`
		} `json:"diagnose"`
		// 新增死亡
		Deaths struct {
			Abroad   int `json:"abroad"`
			Mainland int `json:"mainland"`
		} `json:"deadth"`
		// 新增治愈
		Cure struct {
			// Abroad   int `json:"abroad"`
			Mainland int `json:"mainland"`
		} `json:"cure"`
	} `json:"new"`
}

type KernelVirus struct {
	Title string `json:"title"`
	Time  string `json:"time"`
	New   struct {
		// 新增确诊
		Diagnose struct {
			Total                 int `json:"total"`
			Abroad                int `json:"abroad"`
			Mainland              int `json:"mainland"`
			AbroadFromAsymptoma   int `json:"abroad_from_asymptoma"`
			MainlandFromAsymptoma int `json:"mainland_from_asymptoma"`
		} `json:"diagnose"`
		// 新增死亡
		Deaths struct {
			Total    int `json:"total"`
			Abroad   int `json:"abroad"`
			Mainland int `json:"mainland"`
		} `json:"death"`
		// 新增治愈
		Cure struct {
			Total    int `json:"total"`
			Abroad   int `json:"abroad"`
			Mainland int `json:"mainland"`
		} `json:"cure"`
	} `json:"new"`
	Now struct {
		// 境外输入现有确诊
		AboardCase int `json:"case"`
		// 境外输入现有确诊中的重症病例
		SevereCase int `json:"severe_case"`
	} `json:"now"`
	// 累计
	Accumulation struct {
		Diagnose int `json:"diagnose"`
		Cure     int `json:"cure"`
		Death    int `json:"death"`
	} `json:"accumulation"`
	// 省份映射
	ProvinceDetailed map[string]*VirusDetailed
}

var (
	// CompilePageTitle     = regexp.MustCompile(`<div class="tit">(?P<title>.*?)<\/div>`)
	// CompileFormatPage    = regexp.MustCompile(`<div class="con" id="xw_box">(?s:.*)<div class="fx fr">`)
	// CompilePageLabel     = regexp.MustCompile(`>(.*?)<`)
	// CompileProvinceCount = regexp.MustCompile(`(?P<Province>.*?)(?P<Count>\d+)例`)
	// 新增数据匹配
	// CompileDiagenose = regexp.MustCompile(`新增确诊病例(?P<NewDiagenoseTotal>\d+)例.*?境外输入病例(?P<NewDiagnoseAbroadTotal>\d+)例（(?P<NewDiagnoseAbroadString>.*?)），含(?P<NewDiagnoseAbroadFromAsymptoma>\d+)例由无症状感染者转为确诊病例（(?P<NewDiagnoseAbroadFromAsymptomaString>.*?)）；本土病例(?P<NewDiagnoseMainlandTotal>\d+)例（(?P<NewDiagnoseMainlandString>.*?)），含(?P<NewDiagnoseMainlandFromAsymptoma>\d+)例由无症状感染者转为确诊病例（(?P<NewDiagnoseMainlandFromAsymptomaString>.*?)）。(?:(?P<NewDeaths>无新增死亡病例)。)(?:(?P<NewSuspected>无新增疑似病例)。)`)
	// 新增治愈数据
	// CompileCure = regexp.MustCompile(`当日新增治愈出院病例(?P<NewCureTotal>\d+)例，其中境外输入病例(?P<NewCureAboardTotal>\d+)例，本土病例(?P<NewCureMainlandTotal>\d+)例（(?P<NewCureString>.*?)）`)
	// 本土累计数据
	// CompileAccumulation = regexp.MustCompile(`据31个省（自治区、直辖市）和新疆生产建设兵团报告，现有确诊病例(?P<NowCase>\d+)例（.*?重症病例(?P<SevereCase>\d+)?例?），累计治愈出院病例(?P<AccumulativeCure>\d+)例，累计死亡病例(?P<AccumulativeDeath>\d+)例，累计报告确诊病例(?P<AccumulativeDiagnose>\d+)例.*?疑似病例(?P<maybe>\d+)?例?.*?累计追踪到密切接触者(?P<d>\d+)人.*?尚在医学观察的密切接触者(?P<c>\d+)人`)

	
)

// 请求数据显示的函数
//
// Three keys of map are url, title, time.
func GetAnnouncementList() (AnnouncementList *[]map[string]string, err error) {
	headers := map[string]string{
		"Accept":          "text/html",
		"Accept-Encoding": "deflate",
		"Accept-Language": "zh-US,zh;q=0.9",
		"Cache-Control":   "no-cache",
		"Host":            "www.nhc.gov.cn",
		"Pragma":          "no-cache",
		"Referer":         "http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml",
		"Cookie":          "sVoELocvxVW0S=5gl.8RmTRdqH1VTi_YuDAtYonmdRhclazY670Soajb2G4i1ONPTVmF5ZjFlwUMdkfIfBhwpCZNNCzvDyBBj_LHA; insert_cookie=67313298; yfx_c_g_u_id_10006654=_ck22111421592415939988557252385; yfx_f_l_v_t_10006654=f_t_1668434364589__r_t_1668434364589__v_t_1668434364589__r_c_0; sVoELocvxVW0T=536xxBKJn1MaqqqDlwLSDTqxWG1Gx_QS82cjtqm3zXII1Z4RTiz_SLs4A1EPRD0MQOKOCnfTP9qDqQuP1Jp7gLHT8VmsW9vuQ_mkvs3nNlnDQypuBnespkmbtyyBJKR.BEuThUstQ98A.mlHPsKzU7CAzu1Yz4cFj9cvAfwEsgmxDtK7O.U2__V9z4uY4pIytyL7nb6ZR_7DRa.7UkfZMRAubp2EYc0rA6FeWTfceou.ze2SsUXhuItNYZKiknHCVbflzdNOCVN6HhHoZQ9ktZ9o6bAJL3spz62s0g56JOlNELE3fZgkXY6l0AsMh3FObQ5ULGk0oXIgyQo2sOvOZWI",
		"User-Agent":      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36",
	}
	response, err := requests.Bronya("GET", "http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml", headers, nil, nil, false)
	if err != nil {
		return nil, err
	}

	str := string(response.Body)

	compileCovid19 := regexp.MustCompile(`<a href="(?P<url>.*?)".*?title='(?P<title>.*?)'.*?<span class="ml">(?P<time>.*?)</span>`)

	AnnouncementList = tools.GetParamsMultiDimension(compileCovid19, str)
	if len(*AnnouncementList) == 0 {
		return nil, fmt.Errorf("疫情通报列表长度为零")
	}

	return AnnouncementList, nil
}

// 提取详情页文本
func GetAnnouncementString(url string) (string, error) {
	// request detailed page
	rep, err := requests.Bronya("GET", "http://www.nhc.gov.cn"+url, nil, nil, nil, false)
	if err != nil {
		return "", err
	}

	if rep.StatusCode != 200 {
		return "", fmt.Errorf("StatusCode: %v", rep.StatusCode)
	}

	temp := CompileFormatPage.FindString(string(rep.Body))

	temp2 := CompilePageLabel.FindAllStringSubmatch(temp, -1)

	var OriginalString string
	for _, t := range temp2 {
		if t[1] != "" {
			OriginalString += strings.ReplaceAll(t[1], "\n", "")
		}
	}
	return OriginalString, nil
}

// 获取今日详情页内容
func (Core *KernelVirus) GetTodayAnnouncement() (string, error) {
	AnnouncementList, err := GetAnnouncementList()
	if err != nil {
		return "", err
	}

	url := (*AnnouncementList)[0]["url"]

	Core.Time = (*AnnouncementList)[0]["time"]
	Core.Title = (*AnnouncementList)[0]["title"]

	text, err := GetAnnouncementString(url)
	if err != nil {
		return "", err
	}

	return text, nil
}

// 新增写入
func (Core *KernelVirus) NewDataWrite(OriginalString string) {
	// NewDeaths, NewSuspected
	ParamsNewData := tools.GetParamsOneDimension(CompileDiagenose, OriginalString)

	// 新增确诊病例
	if ParamsNewData["NewDiagenoseTotal"] != "" {
		num, err := strconv.Atoi(ParamsNewData["NewDiagenoseTotal"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Diagnose.Total = num
		}
	}

	// 新增境外输入
	if ParamsNewData["NewDiagnoseAbroadTotal"] != "" {
		num, err := strconv.Atoi(ParamsNewData["NewDiagnoseAbroadTotal"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Diagnose.Abroad = num
		}
	}

	// 新增境外输入中包含的无症状转确诊
	if ParamsNewData["NewDiagnoseAbroadFromAsymptoma"] != "" {
		num, err := strconv.Atoi(ParamsNewData["NewDiagnoseAbroadFromAsymptoma"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Diagnose.AbroadFromAsymptoma = num
		}
	}

	// 新增本土病例
	if ParamsNewData["NewDiagnoseMainlandTotal"] != "" {
		num, err := strconv.Atoi(ParamsNewData["NewDiagnoseMainlandTotal"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Diagnose.Mainland = num
		}
	}

	// 新增本土病例中包含的无症状转确诊
	if ParamsNewData["NewDiagnoseMainlandFromAsymptoma"] != "" {
		num, err := strconv.Atoi(ParamsNewData["NewDiagnoseMainlandFromAsymptoma"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Diagnose.MainlandFromAsymptoma = num
		}
	}

	Core.ProvinceDetailed = make(map[string]*VirusDetailed)

	// 各省份新增境外输入病例
	if ParamsNewData["NewDiagnoseAbroadString"] != "" {
		str := ParamsNewData["NewDiagnoseAbroadString"]
		list := strings.Split(str, "，")

		for _, i := range list {
			dict := tools.GetParamsOneDimension(CompileProvinceCount, i)
			province := dict["Province"]
			Count, err := strconv.Atoi(dict["Count"])
			if err != nil {
				log.Println(err)
				continue
			}
			if Core.ProvinceDetailed[province] == nil {
				Core.ProvinceDetailed[province] = &VirusDetailed{}
			}

			TempStruct := Core.ProvinceDetailed[province]
			TempStruct.New.Diagnose.Abroad = Count
			Core.ProvinceDetailed[province] = TempStruct
		}
	}

	// 各省份新增境外输入病例中无症状转确诊
	if ParamsNewData["NewDiagnoseAbroadFromAsymptomaString"] != "" {
		str := ParamsNewData["NewDiagnoseAbroadFromAsymptomaString"]
		list := strings.Split(str, "，")
		for _, i := range list {
			dict := tools.GetParamsOneDimension(CompileProvinceCount, i)
			province := dict["Province"]
			Count, err := strconv.Atoi(dict["Count"])
			if err != nil {
				log.Println(err)
				continue
			}
			if Core.ProvinceDetailed[province] == nil {
				Core.ProvinceDetailed[province] = &VirusDetailed{}
			}

			TempStruct := Core.ProvinceDetailed[province]
			TempStruct.New.Diagnose.AbroadFromAsymptoma = Count
			Core.ProvinceDetailed[province] = TempStruct
		}
	}

	// 各省份新增本土病例
	if ParamsNewData["NewDiagnoseMainlandString"] != "" {
		str := ParamsNewData["NewDiagnoseMainlandString"]
		list := strings.Split(str, "，")

		for _, i := range list {
			dict := tools.GetParamsOneDimension(CompileProvinceCount, i)
			province := dict["Province"]
			Count, err := strconv.Atoi(dict["Count"])
			if err != nil {
				log.Println(err)
				continue
			}
			if Core.ProvinceDetailed[province] == nil {
				Core.ProvinceDetailed[province] = &VirusDetailed{}
			}

			TempStruct := Core.ProvinceDetailed[province]
			TempStruct.New.Diagnose.Mainland = Count
			Core.ProvinceDetailed[province] = TempStruct
		}
	}

	// 各省份新增本土病例中无症状转确诊
	if ParamsNewData["NewDiagnoseMainlandFromAsymptomaString"] != "" {
		str := ParamsNewData["NewDiagnoseMainlandFromAsymptomaString"]
		list := strings.Split(str, "，")
		for _, i := range list {
			dict := tools.GetParamsOneDimension(CompileProvinceCount, i)
			province := dict["Province"]
			Count, err := strconv.Atoi(dict["Count"])
			if err != nil {
				log.Println(err)
				continue
			}
			if Core.ProvinceDetailed[province] == nil {
				Core.ProvinceDetailed[province] = &VirusDetailed{}
			}

			TempStruct := Core.ProvinceDetailed[province]
			TempStruct.New.Diagnose.MainlandFromAsymptoma = Count
			Core.ProvinceDetailed[province] = TempStruct
		}
	}

	ParamsNewCureData := tools.GetParamsOneDimension(CompileCure, OriginalString)

	// 新增治愈出院病例
	if ParamsNewCureData["NewCureTotal"] != "" {
		num, err := strconv.Atoi(ParamsNewCureData["NewCureTotal"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Cure.Total = num
		}
	}

	// 新增境外治愈出院病例
	if ParamsNewCureData["NewCureAboardTotal"] != "" {
		num, err := strconv.Atoi(ParamsNewCureData["NewCureAboardTotal"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Cure.Abroad = num
		}
	}

	// 新增本土治愈出院病例
	if ParamsNewCureData["NewCureMainlandTotal"] != "" {
		num, err := strconv.Atoi(ParamsNewCureData["NewCureMainlandTotal"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Cure.Mainland = num
		}
	}

	// 各省份新增本土治愈出院病例
	if ParamsNewCureData["NewCureMainlandString"] != "" {
		str := ParamsNewCureData["NewCureMainlandString"]
		list := strings.Split(str, "，")

		for _, i := range list {
			dict := tools.GetParamsOneDimension(CompileProvinceCount, i)
			province := dict["Province"]
			Count, err := strconv.Atoi(dict["Count"])
			if err != nil {
				log.Println(err)
				continue
			}
			if Core.ProvinceDetailed[province] == nil {
				Core.ProvinceDetailed[province] = &VirusDetailed{}
			}

			TempStruct := Core.ProvinceDetailed[province]
			TempStruct.New.Cure.Mainland = Count
			Core.ProvinceDetailed[province] = TempStruct
		}
	}

	ParamsAccumulativeData := tools.GetParamsOneDimension(CompileAccumulation, OriginalString)

	// 现有确诊
	if ParamsAccumulativeData["NowCase"] != "" {
		num, err := strconv.Atoi(ParamsAccumulativeData["NowCase"])
		if err != nil {
			log.Println(err)
		} else {
			Core.New.Cure.Mainland = num
		}
	}
}

func Entry() (*KernelVirus, error) {
	Core := &KernelVirus{}
	OriginalString, err := Core.GetTodayAnnouncement()
	if err != nil {
		return nil, err
	}

	Core.NewDataWrite(OriginalString)

	return Core, nil
}
